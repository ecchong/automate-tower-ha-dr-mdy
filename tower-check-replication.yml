---

- hosts: database_replica
  gather_facts: yes
  become: true
  become_user: postgres
  vars:
    replication_time_threshold: 20
  vars_files: tower-vars.yml
  tasks:
  - name: Include variables specific for RHEL 8
    include_vars:
      file: roles/samdoran.pgsql-replication/vars/RedHat-8.yml
    when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "8"

  - name: Include variables specific for RHEL 7
    include_vars:
      file: roles/samdoran.pgsql-replication/vars/RedHat-7.yml
    when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "7"

  - name: HIGH LEVEL BLOCK TO DETERMINE IF DB REPLICATION IS MANAGED BY TOOLKIT
    block:
    - name: check replication status and latency
      #FROM ED pg_last_xlog_receive_location() = pg_last_xlog_replay_location() THEN 0
#      command: psql -U postgres -t -c "select extract(epoch from now() - pg_last_xact_replay_timestamp());"
      shell: "{{ pgsql_psql_command }} -U postgres -t -c 'select extract(epoch from now() - pg_last_xact_replay_timestamp());'"
      register: replication_latency
      changed_when: false

    - name: extract datetime
      debug:
        msg: "Replication latency is {{ replication_latency.stdout | float }}"
      failed_when: replication_latency.stdout | float > replication_time_threshold

    - name: ensure replica is in recovery mode
#      command: psql -U postgres -t -c "select pg_is_in_recovery();"
      shell: "{{ pgsql_psql_command }} -U postgres -t -c 'select pg_is_in_recovery();'"
      register: recovery_mode
      changed_when: false

    - name: check recovery mode is set to true on replica(s)
      debug:
        msg: "Recovery mode is '{{ recovery_mode.stdout.strip() }}'"
      failed_when: recovery_mode.stdout.strip() != 't'

    when: not tower_db_external

- hosts: database
  gather_facts: yes
  become: true
  become_user: postgres
  vars_files: tower-vars.yml
  tasks:
  - name: Include variables specific for RHEL 8
    include_vars:
      file: roles/samdoran.pgsql-replication/vars/RedHat-8.yml
    when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "8"

  - name: Include variables specific for RHEL 7
    include_vars:
      file: roles/samdoran.pgsql-replication/vars/RedHat-7.yml
    when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == "7"

  - name: HIGH LEVEL BLOCK TO DETERMINE IF DB REPLICATION IS MANAGED BY TOOLKIT
    block:

    - name: ensure master is not in recovery mode
#      command: psql -U postgres -t -c "select pg_is_in_recovery();"
      shell: "{{ pgsql_psql_command }} -U postgres -t -c 'select pg_is_in_recovery();'"
      register: recovery_mode
      changed_when: false

    - name: check recovery mode is set to false on primary
      debug:
        msg: "Recovery mode is '{{ recovery_mode.stdout.strip() }}'"
      failed_when: recovery_mode.stdout.strip() != 'f'
      ignore_errors: yes

    - name: ensure master db is configured on tower nodes
#      command: python -c "import postgres; print postgres.DATABASES['default']['HOST']"
      command: python3 -c "import postgres; print (postgres.DATABASES['default']['HOST'])"
      args:
        chdir: /etc/tower/conf.d
      register: master_db
      delegate_to: "{{ groups['tower'][0] }}"
      become_user: root
      changed_when: false

    - name: check configured db for tower nodes
      debug:
        msg: "Configured db is {{ master_db.stdout }}"
      failed_when: pg_host != master_db.stdout

    when: not tower_db_external
